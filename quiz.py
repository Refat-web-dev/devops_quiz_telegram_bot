from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import os
import random

LEADERBOARD_FILE = "records.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_leaderboard():
    try:
        if os.path.exists(LEADERBOARD_FILE):
            with open(LEADERBOARD_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_leaderboard():
    try:
        with open(LEADERBOARD_FILE, "w", encoding="utf-8") as f:
            json.dump(global_leaderboard, f, ensure_ascii=False, indent=4)
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(LEADERBOARD_FILE):
    with open(LEADERBOARD_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=4)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞
global_leaderboard = load_leaderboard()

# –ú–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
sample_questions = [
    {
        "question": "–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è LTS?",
        "answers": [
            "a) Long Time Support",
            "b) Long Time Service",
            "c) Long Term Support",
            "d) Linux Term Service",
            "e) Linux Time Support"
        ],
        "correct_answer": "c"
    }
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞
active_quizzes = {}  # {chat_id: {"remaining_questions": [...], "scores": {user_id: score}}}

# –ù–∞—á–∞—Ç—å –∫–≤–∏–∑
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if chat_id in active_quizzes:
        await update.message.reply_text("–ö–≤–∏–∑ —É–∂–µ –∏–¥–µ—Ç! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞
    random.shuffle(sample_questions)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    active_quizzes[chat_id] = {"remaining_questions": sample_questions.copy(), "scores": {}}
    await send_question(update, context)

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    quiz = active_quizzes.get(chat_id)
    if not quiz:
        await update.message.reply_text("–ö–≤–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    if not quiz["remaining_questions"]:
        await end_quiz(update, context)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    question_data = quiz["remaining_questions"][0]
    question_text = f"–í–æ–ø—Ä–æ—Å: {question_data['question']}\n\n" + "\n".join(question_data["answers"])
    await update.message.reply_text(question_text)

# –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
    quiz = active_quizzes.get(chat_id)

    if not quiz:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–≤–∏–∑ –Ω–µ –∏–¥–µ—Ç

    answer = update.message.text.lower().strip()
    if answer not in ["a", "b", "c", "d", "e"]:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –Ω–∞–±–æ—Ä–∞ [a, b, c, d, e]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    question_data = quiz["remaining_questions"].pop(0)  # –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if answer == question_data["correct_answer"]:
        quiz["scores"][user_id] = quiz["scores"].get(user_id, 0) + 1
        await update.message.reply_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ, {username}! üéâ")
    else:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, {username}. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_answer']}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∫–≤–∏–∑
    if quiz["remaining_questions"]:
        await send_question(update, context)
    else:
        await end_quiz(update, context)

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑
async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global global_leaderboard
    chat_id = update.effective_chat.id
    quiz = active_quizzes.pop(chat_id, None)

    if not quiz:
        await update.message.reply_text("–ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    for user_id, score in quiz["scores"].items():
        user_id = str(user_id)  # –ü—Ä–∏–≤–æ–¥–∏–º user_id –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        username = "–•–∞–∑—Ä–∞—Ç" if user_id == "1415003296" else (await update.effective_chat.get_member(int(user_id))).user.first_name
        if user_id in global_leaderboard:
            global_leaderboard[user_id]["score"] += score
        else:
            global_leaderboard[user_id] = {"username": username, "score": score}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
    save_leaderboard()

    # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –∫–≤–∏–∑–∞
    scores = quiz["scores"]
    if scores:
        leaderboard = "\n".join(
            [
                f"{'–•–∞–∑—Ä–∞—Ç' if user_id == '1415003296' else (await update.effective_chat.get_member(int(user_id))).user.first_name}: {score}"
                for user_id, score in sorted(scores.items(), key=lambda x: x[1], reverse=True)
            ]
        )
        await update.message.reply_text(f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ\n–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞:\n\n{leaderboard}")
    else:
        await update.message.reply_text("–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. üòî")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
async def show_records(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not global_leaderboard:
        await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    leaderboard = "\n".join(
        [
            f"{'–•–∞–∑—Ä–∞—Ç' if user_id == '1415003296' else record['username']}: {record['score']}"
            for user_id, record in sorted(global_leaderboard.items(), key=lambda x: x[1]['score'], reverse=True)
        ]
    )
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n{leaderboard}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞ –≤—Ä—É—á–Ω—É—é
async def stop_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if chat_id not in active_quizzes:
        await update.message.reply_text("–ö–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
    await end_quiz(update, context)
    await update.message.reply_text("–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
async def show_records(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not global_leaderboard:
        await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    leaderboard = "\n".join(
        [
            f"{record['username']}: {record['score']}"
            for record in sorted(global_leaderboard.values(), key=lambda x: x['score'], reverse=True)
        ]
    )
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n{leaderboard}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
def main():
    application = Application.builder().token("7696889634:AAFvquRqGjd9mdY7EgU5QrSJQXpNvGMwTHQ").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("quiz", start_quiz))
    application.add_handler(CommandHandler("stop", stop_quiz))
    application.add_handler(CommandHandler("records", show_records))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
